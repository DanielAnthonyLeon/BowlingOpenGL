#version 330

struct LightSource {
    vec3 position;
    vec3 rgbIntensity;
};

in VsOutFsIn {
	vec3 position_ES; // Eye-space position
	vec3 normal_ES;   // Eye-space normal
	vec2 uvCoords_ES;
	LightSource light;
	vec4 FragPosLightSpace;
} fs_in;

out vec4 fragColour;

uniform sampler2D textureMap;
uniform sampler2D shadowMap;
uniform sampler2D normalMap;
uniform bool normalMapping;
uniform bool reflection;

struct Material {
    vec3 kd;
    vec3 ks;
    float shininess;
};
uniform Material material;

// Ambient light intensity for each RGB component.
uniform vec3 ambientIntensity;

float ShadowCalculation(vec4 fragPosLightSpace, vec3 normal) {
	// perform perspective divide
	vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
	projCoords = projCoords * 0.5 + 0.5;
	float closestDepth = texture(shadowMap, projCoords.xy).r;
	float currentDepth = projCoords.z;
	vec3 lightDir = normalize(fs_in.light.position);
	float bias = max(0.05 * (1.0 - dot(normal, lightDir)), 0.005);
	float shadow = 1.0;
	if (currentDepth - bias > closestDepth)
		shadow = 0.5;
	return shadow;
}

vec3 phongModel(vec3 fragPosition, vec3 fragNormal) {
	if (normalMapping) {
		// Obtain normal from normal map in range [0, 1]
		fragNormal = texture(normalMap, fs_in.uvCoords_ES).rgb;
		// Transform normal vector to range [-1, 1]
		fragNormal = normalize(fragNormal * 2.0 - 1.0);
	}

	LightSource light = fs_in.light;

  // Direction from fragment to light source.
  vec3 l = normalize(light.position - fragPosition);

  // Direction from fragment to viewer (origin - fragPosition).
  vec3 v = normalize(-fragPosition.xyz);

  float n_dot_l = max(dot(fragNormal, l), 0.0);

	vec3 diffuse;
	diffuse = material.kd * n_dot_l;
	
	vec2 uvCoords = fs_in.uvCoords_ES;
	uvCoords.y = 1 - uvCoords.y;
	vec3 texCol = texture(textureMap, uvCoords).rgb;
	
	diffuse = texCol * n_dot_l + 0.000001 * diffuse;

  vec3 specular = vec3(0.0);

  if (n_dot_l > 0.0) {
		// Halfway vector.
		vec3 h = normalize(v + l);
    float n_dot_h = max(dot(fragNormal, h), 0.0);

    specular = material.ks * pow(n_dot_h, material.shininess);
  }
	
	float shadow = ShadowCalculation(fs_in.FragPosLightSpace, fs_in.normal_ES);

	// perform perspective divide
	vec3 projCoords = fs_in.FragPosLightSpace.xyz / fs_in.FragPosLightSpace.w;
	// Transform to [0,1] range
	projCoords = projCoords * 0.5 + 0.5;

	return ambientIntensity + shadow * light.rgbIntensity * (diffuse + specular);
  //return ambientIntensity + (1 - shadow) * light.rgbIntensity * (diffuse + specular);
}

void main() {
	fragColour = vec4(phongModel(fs_in.position_ES, fs_in.normal_ES), 1.0) + vec4(0.000001*fs_in.uvCoords_ES, 0.000001, 0.000001);
	if (reflection) {
		fragColour *= 0.99999*reflection;
	}
}
